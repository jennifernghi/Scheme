;;; CS 152 Homework 4 - A simple chatbot
;;; starter code

;;; We'll use the random function implemented in Racket
;;; (random k) returns a random integer in the range 0 to k-1
(#%require (only racket/base random))

;;; some input and output helper functions

;;; prompt:  prompt the user for input
;;; return the input as a list of symbols
(define (prompt)
   (newline)
   (display "talk to me >>>")
   (read-line))

;;; read-line: read the user input till the eof character
;;; return the input as a list of symbols
(define (read-line)
  (let ((next (read)))
    (if (eof-object? next)
        '()
        (cons next (read-line)))))

;;; output: take a list such as '(how are you?) and display it
(define (output lst)
       (newline)
       (display (to-string lst))
       (newline))

;;; to-string: convert a list such as '(how are you?)
;;; to the string  "how are you?"
(define (to-string lst)       
  (cond ((null? lst) "")
        ((eq? (length lst) 1) (symbol->string (car lst)))
        (else (string-append (symbol->string (car lst))
                              " "
                             (to-string (cdr lst))))))

;;;;;;;;;;;;;set helpers;;;;;;;;;;;;;;;;
;(in? e s):  return #t if the element e is in the set s, #f otherwise.
(define (in? e s)
        (if (null? s) #f ; #f if set null
                           (or (eqv? e (car s))   ; #t when car s eqv  w/e
                               (in? e (cdr s))))) ; if not recursive call on cdr s




;;;  main function
;;;  usage:  (chat-with 'your-name)

(define (chat-with name)
  (output (list 'hi name))
  (chat-loop name))

;;; chat loop
(define (chat-loop name)
  (let ((input (prompt))) ; get the user input
    (if (eqv? (car input) 'bye)
        (begin
          (output (list 'bye name))
          (output (list 'have 'a 'great 'day!)))
        (begin
	  (reply input name)
          (chat-loop name)))))


;;; your task is to fill in the code for the reply function
;;; to implement rules 1 through 11 with the required priority
;;; each non-trivial rule must be implemented in a separate function
;;; define any helper functions you need below
(define (reply input name)
  (cond ((question?  input) (question-rules input) );;rule 1, 4, 5
        ((special-topic? input) (special-topic-rule input name));rule2
        ((in? 'because input) (output (list (string->symbol "is that the real reason?"))));;rule 7
        ((or (eqv? (car input) 'i) (eqv? (car input) 'I)) (i-rules input));; rule 9, 11
        ( (in? (car input) verb) (output (list 'you (string->symbol (to-string input)))));rule 10
        
        (else  (output (pick-random generic-response))) ; rule 11
  )
)  

;;; pick one random element from the list choices
(define (pick-random choices)
  (list-ref choices (random (length choices))))

;;; generic responses for rule 11
(define generic-response '((that\'s nice)
                           (good to know)
                           (can you elaborate on that?)))



(define what-response '((what do you think?)
                          (why do you ask?)
                          (let me know your thoughts first!))

)

(define how-response    '((how would an answer to that help you?)
                          (why do you ask?))
)
(define special-topics    (list 'family 'friend 'friends 'job 'love))
(define other-questions-response '((I don't know)
                                   (Maybe)
                                   (I have no idea)
                                   (I have no clue))

)
(define (i-rules input)
        (cond ((eqv? 'too (last-word input)) (output (pick-random generic-response)));; rule 11
                     (else (output (list (string->symbol (to-string input)) 'too)))) ;; rule 9
)

;; get the last word
;; input: symbol
(define (last-word input)
        (cond 
              ((eqv? (length input) 1) (car input))
              (else (last-word (cdr input)))
        )
)

(define (discard e s)
        (cond ((or (empty? s) (not (in? e s))) s) ; base case: s is empty or e not in s -> return s
              ((eqv? e (car s)) (discard e (cdr s))); if e == car s, keep calling on cdr s
              (else (cons (car s) (discard e (cdr s))))) ; if not; return a list by cons cars + recursive call on cdrs 
             
)

(define verb (list 'give 'talk 'tell 'say 'draw 'make))
(define questionword (list 'why 'what 'how 'do 'can 'will 'would))

;;rules for questions
(define (question-rules input)
        (cond ((eqv? (car input) 'why) (output (list (string->symbol "why not?")))) ;;rule 1
        ((eqv? (car input) 'how) (output (pick-random how-response))) ;;rule 4
        ((eqv? (car input) 'what) (output (pick-random what-response))) ;;rule 5
        ((or (eqv? '? (last-word input)) ; rule 6
             (eqv? #\? (last-word (string->list (symbol->string (last-word input))))))
           (output (pick-random other-questions-response)) )
        ((eqv? #\? (extract-last-character (last-word input))) (output (list 'yes)))
        )

)


(define (special-topic? input)
  (cond ((disjoint? input special-topics) #f)
        (else #t))
)

;;rule 2
(define (special-topic-rule input name)
     (let ((intersection-topics (intersection input special-topics)))

       (cond ((eqv? (length intersection-topics) 1) (output (list (string->symbol "tell me about your") (car  intersection-topics) name)))
             (else  (output (list (string->symbol "tell me about your")  (pick-random  intersection-topics) name)))
             ))  

  )
;;check if input is a question
(define (question? input)
         (cond ((in? (car input) questionword) #t)
               ((eqv? '? (last-word input)) #t)
               ((eqv? #\? (last-word (string->list (symbol->string (last-word input))))) #t)
               (else #f))
)


;;extract last chracter of a symbol
(define (extract-last-character symbol)
  (cond (symbol? symbol) (last-word (string->list (symbol->string symbol))))
)

;call tail-recursive
(define (intersection s1 s2)
  (tintersection s1 s2 '())
)

;(intersection s1 s2):  return a new set that contains all the elements that appear in both sets.
(define (tintersection s1 s2 sofar)
        (cond ((empty? s1) sofar); base case: return empty set if either s1 empty
              ((in? (car s1) s2) (tintersection (cdr s1) s2 (append sofar (list (car s1))))); create a new list with elements of s1 in s2
              (else (tintersection (cdr s1) s2 sofar)))
)

;(disjoint? s1 s2): return #t if s1 and s2 have no elements in common, #f otherwise.
(define (disjoint? s1 s2)
      (if (empty? (intersection s1 s2)) #t #f); #t if intersection is empty   
)

(define (empty? s)        
       (if (null? s) #t #f) ; #t if list s null
)


