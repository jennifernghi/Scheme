;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;Name: Nghi Nguyen                                          ;;
;;;SJSU id: 010872316                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;(empty? s):  return #t if s is an empty set and #f otherwise.
(define (empty? s)        
       (if (null? s) #t #f) ; #t if list s null
)

;tail recursion
(define (set s)
      (tset s '())
)

;(tset s):  return a list representation of a set where each element appears once.  The order is not relevant.
(define (tset s sofar)
      (cond ((empty? s) sofar) ;base case: null set
            ((not (in? (car s) sofar)) (tset (cdr s) (append  sofar (list (car s))))) ; if car s not in sofar -> append car s to sofar list
            (else (tset (cdr s) sofar))
))


;(in? e s):  return #t if the element e is in the set s, #f otherwise.
(define (in? e s)
        (if (null? s) #f ; #f if set null
                           (or (eqv? e (car s))   ; #t when car s eqv  w/e
                               (in? e (cdr s))))) ; if not recursive call on cdr s

;(add e s):  return a new set that contains all the elements in s and the element e.
(define (add e s)
         (cond ((empty? s) (cons e s)) ; if s empty, cons e to s
               ((in? e s) s) ; e in s, return s
               (else (append s (list e)))) ; if not, cons e to s           
)


;(discard e s): return a new set that contains all the elements in s other than e.  If e is not in s, discard returns s.
(define (discard e s)
        (cond ((or (empty? s) (not (in? e s))) s) ; base case: s is empty or e not in s -> return s
              ((eqv? e (car s)) (discard e (cdr s))); if e == car s, keep calling on cdr s
              (else (cons (car s) (discard e (cdr s))))) ; if not; return a list by cons cars + recursive call on cdrs 
             
) 

;(tdiscard e s): tail-recursive return a new set that contains all the elements in s other than e.  If e is not in s, discard returns s.
;(define (tdiscard e s sofar)
;        (cond ((empty? s) sofar); base case: s is empty -> return sofar
;              ((not (in? e s)) s); base case: e not in s -> return s
;              ((eqv? e (car s)) (tdiscard e (cdr s) sofar)); if e == car s, keep calling on cdr s
;               (else (tdiscard (cadr s) (cdr s)  (append sofar (car s)))); else append car s to sofar and call (tdiscard (cadr s) (cdr s) (sofar))
;))       

;(union s1 s2):  return a new set that contains all the elements in s1 and all the elements of s2.  The new set does not contain duplicates.
(define (union s1 s2)
        (cond ((empty? s1) s2);base case
              ((empty? s2) s1); base case
              ((in? (car s1) s2) (union (cdr s1) s2))
              (else (cons (car s1) (union (cdr s1) s2))); cons each element if s1 to s2 iff element in s1 not in s
         )
)


;call tail-recursive
(define (intersection s1 s2)
  (tintersection s1 s2 '())
)

;(intersection s1 s2):  return a new set that contains all the elements that appear in both sets.
(define (tintersection s1 s2 sofar)
        (cond ((empty? s1) sofar); base case: return empty set if either s1 empty
              ((in? (car s1) s2) (tintersection (cdr s1) s2 (append sofar (list (car s1))))); create a new list with elements of s1 in s2
              (else (tintersection (cdr s1) s2 sofar)))
)

;call tail-recursive
(define (difference s1 s2)
      (tdifference s1 s2 '())
)

;(difference s1 s2):  return a new set that contains all the elements in s1 that are not in s2.
(define (tdifference s1 s2 sofar)
        (cond ((empty? s1) sofar); base case: if s1 empty -> return '()
              ((empty? s2) s1); base case: if s2 empty -> return s1
              ((in? (car s1) s2) (tdifference (cdr s1) s2 sofar)); check is there any element of s1 in s2
              (else (tdifference (cdr s1) s2 (append sofar (list(car s1))))); return new set with elemens of s1 that is not in s2
              )
)
;(symmetric-difference s1 s2): return a new set with elements in either s1 or s2 but not both.
(define (symmetric-difference s1 s2) ; symmetric-difference = union - intersect -> discard every element in intersect region
  (let ((intersect (intersection s1 s2)); intersect variable hold set of intersection of s1 and s2
        (union (union s1 s2))); union variable holds set of union of s1 and s2
        (cond ((empty? intersect) union); base case: intersect empty -> return uion
              (else (discard (car intersect) (symmetric-difference (cdr intersect) union))); otherwise, discard each element in intersect in union set
        )
    )       
)

;(subset? s1 s2):  return #t if every element of s1 is in s2, #f otherwise.
(define (subset? s1 s2)
       (if (empty? s1) #t ; #t if s1 empty
                      (cond ((in? (car s1) s2) (subset? (cdr s1) s2)) ; else: check every e of s1 in s2
                            (else #f))); other wise
)

;(superset? s1 s2): return #t if every element of s2 is in s1, #f otherwise.
(define (superset? s1 s2)
        (subset? s2 s1);A subset of B equivalent with B is superset of A
)

;(disjoint? s1 s2): return #t if s1 and s2 have no elements in common, #f otherwise.
(define (disjoint? s1 s2)
      (if (empty? (intersection s1 s2)) #t #f); #t if intersection is empty   
)

;(sameset? s1 s2): return #t if s1 and s2 have the same elements, #f otherwise.  The order is not relevant.
(define (sameset? s1 s2)
           (if (empty? (symmetric-difference s1 s2)) #t #f);#t if (symmetric-difference s1 s2) is empty
      
)


; some tests
(define A (set '(1 2 7 9 7 1)))
(define B (set '(2 0 8 0 7 12)))
(define C (set '(9 7)))


(define colors (set '("yellow" "red" "green" "blue" "orange" "purple" "pink")))
(define rgb (set '("red" "green" "blue")))

(define hi (set '(#\h #\i)))
(display "set A: ")
A
(display "set B: ")
B
(display "set C:")
C
(display "set colors:")
colors
(display "set rgb:")
rgb
(display "set hi:")
hi
(display "-------empty? test------\n")
(empty? A) ; #f
(empty? rgb) ;#f
(empty? (set'())) ;#t
(display "-------in? test------\n")
(in? 0 A) ; #f
(in? "red" A); #f
(in? 2 A) ; #t

(in? "green" rgb) ; #t
(in? "purple" rgb) ; #f
(in? "i" hi) ;#f
(in? #\i hi) ;#t
(display "-------add test------\n")
(add 9 A) ; (2 9 7 1)
(add 5 A) ; (5 2 9 7 1)
(display "-------discard test------\n")
(discard 1 A) ; (2 9 7)
(discard 5 A) ; (2 9 7 1)
(display "-------union test------\n")
(union A B) ; (9 1 2 8 0 7 12)
(union A rgb) ; (2 9 7 1 "red" "green" "blue")
(display "-------intersection test------\n")
(intersection A rgb) ; ()
(intersection A B) ; (2 7)
(intersection rgb colors) ; ("red" "green" "blue")
(display "-------difference test------\n")
(difference A B) ; (9 1)
(difference rgb colors) ; ()
(difference colors rgb) ; ("yellow" "orange" "purple" "pink")
(display "-------symmetric-difference test------\n")
(symmetric-difference A B) ; (9 1 8 0 12)
(symmetric-difference A C) ; (2 1)
(symmetric-difference colors rgb) ; ("yellow" "orange" "purple" "pink")
(display "-------subset test------\n")
(subset? A B) ;#f
(subset? C A) ; #t

(subset? colors rgb) ;#f
(subset? rgb colors)  ; #t
(display "-------superset test------\n")
(superset? A B) ;#f
(superset?  A C) ; #t

(superset? colors rgb) ;#t
(superset? rgb colors)  ; #f
(display "-------disjoint test------\n")
(disjoint? B C) ;#f
(disjoint? colors A) ;#t
(display "-------sameset? test------\n")
(sameset? (set '(9 1 2 7)) A); #t
(sameset? B A) ; #f


